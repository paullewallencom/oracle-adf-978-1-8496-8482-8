package com.packtpub.adfguide.ch5.model.service;

import com.packtpub.adfguide.ch5.model.service.common.HRServiceAppModule;
import com.packtpub.adfguide.ch5.model.view.DepartmentProgrammaticVOImpl;
import com.packtpub.adfguide.ch5.model.view.DepartmentVOImpl;

import com.packtpub.adfguide.ch5.model.view.FileStorageVOImpl;

import com.packtpub.adfguide.ch5.model.view.FileStorageVORowImpl;

import java.util.HashMap;
import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewDef;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Array;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.DomainContext;
import oracle.jbo.domain.generic.GenericClob;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.Entity;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.PDefEntityObject;
import oracle.jbo.server.PDefViewObject;
import oracle.jbo.server.RowImpl;
import oracle.jbo.server.SQLBuilder;
import oracle.jbo.server.ViewDefImpl;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jbo.server.ViewRowImpl;

import org.w3c.dom.Element;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 04 15:54:28 IST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HRServiceAppModuleImpl extends ApplicationModuleImpl implements HRServiceAppModule {
    private static final String DYNAMIC_DETP_VO_INSTANCE = "DynamicDeptVO";
    private static final String ATTRIB_LOC_ID = "LocationId";

    /**
     * This is the default constructor (do not remove).
     */
    public HRServiceAppModuleImpl() {
    }

    /**
     * Container's getter for Departments.
     * @return Departments
     */
    public DepartmentVOImpl getDepartments() {
        return (DepartmentVOImpl)findViewObject("Departments");
    }

    /**
     * Container's getter for Employees.
     * @return Employees
     */
    public ViewObjectImpl getEmployees() {
        return (ViewObjectImpl)findViewObject("Employees");
    }

    /**
     * Generate composite VO
     */
    public void createCompositeDeptEmpVO() {


        ViewDefImpl compVODef = (ViewDefImpl)createCompositeViewDef("DeptEmpDetail", "DeptEmpDetail");
        compVODef.addViewUsage("Dept", "com.packtpub.adfguide.ch5.model.view.DepartmentVO");
        compVODef.addViewUsage("Emp", "com.packtpub.adfguide.ch5.model.view.EmployeeVO",
                               "com.packtpub.adfguide.ch5.model.view.link.DeptToEmpViewLink", "EmployeeVO", "Dept");
        compVODef.addAllRowAttributes("Dept");
        compVODef.addRowAttribute("EmployeeId", "Emp", "EmployeeId");
        compVODef.addRowAttribute("FirstName", "Emp", "FirstName");
        compVODef.addRowAttribute("LastName", "Emp", "LastName");
        compVODef.addRowAttribute("EmpDepartmentId", "Emp", "DepartmentId");
        compVODef.addRowAttribute("HireDate", "Emp", "HireDate");

        ViewCriteria vc = compVODef.createViewCriteria();
        ViewCriteriaRow vcr = vc.createViewCriteriaRow();
        ViewCriteriaItem vcItem = vcr.ensureCriteriaItem("HireDate");
        vcItem.setOperator(">=");
        vcItem.setValue("2008-02-13");
        vc.add(vcr);
        compVODef.putViewCriteria("DeptEmpDetailVC", vc);

        compVODef.setOrderByClause("DepartmentName, FirstName");
        compVODef.resolveDefObject();
        compVODef.writeXMLContents();
        compVODef.saveXMLContents();

        ViewObjectImpl compDeptEmpVO = (ViewObjectImpl)createViewObject("DeptEmpDetail", compVODef.getFullName());
        compDeptEmpVO.getViewCriteriaManager().setApplyViewCriteriaName("DeptEmpDetailVC");
        // If needed, retrieve the composite VO SQL statement
        String sqlQueryStmt = compDeptEmpVO.getQuery();
        System.out.println("sqlQueryStmt -" + sqlQueryStmt);
        // If you want the data, iterate it like a normal view object.
        compDeptEmpVO.setForwardOnly(true);
        compDeptEmpVO.executeQuery();
        while (compDeptEmpVO.hasNext()) {
            Row r = compDeptEmpVO.next();
            System.out.println(r.getAttribute(0) + "-" + r.getAttribute(5));
            // Process current row in whatever way is needed
        }
    }

    /**
     * Inserts CLOB
     * @param content
     * @param filename
     */
    public void saveUploadedFile(ClobDomain content, String filename) {
        ViewObjectImpl fileStrorages = getFilesStorage();
        FileStorageVORowImpl newRow = (FileStorageVORowImpl)fileStrorages.createRow();
        fileStrorages.insertRow(newRow);
        newRow.setFileContent(content);
        newRow.setFileName(filename);
        getDBTransaction().commit();
    }

    /**
     * Container's getter for FileStorageVO1.
     * @return FileStorageVO1
     */
    public FileStorageVOImpl getFilesStorage() {
        return (FileStorageVOImpl)findViewObject("FilesStorage");
    }

    /**
     * Finds the department rows for array of departmnet names
     * @param deptNamesArray
     */
    public void findDepartmentsForDepartmnetNames(String[] deptNamesArray) {
        deptNamesArray = new String[] { "Administration1", "Marketing" };
        ViewObjectImpl deptVOImpl = getDepartments();
        //Define named parameter
        deptVOImpl.defineNamedWhereClauseParam("ArrayOfDeptNames", null, null);
        //Set the Where clause
        deptVOImpl.setWhereClause("DepartmentEO.DEPARTMENT_NAME MEMBER OF CAST(:ArrayOfDeptNames AS CHARTABLETYPE)");
        //Set the parameter value
        deptVOImpl.setNamedWhereClauseParam("ArrayOfDeptNames", getValueAsArray(deptNamesArray));
        deptVOImpl.executeQuery();
        System.out.println(deptVOImpl.getEstimatedRowCount());
    }

    /**
     * Finds the department rows using VC for array of departmnet names
     * @param deptNamesArray
     */
    public void findDepartmentsForDepartmnetNamesUsingVC(String[] deptNamesArray) {
        ViewObjectImpl deptVOImpl = getDepartments();
        ViewCriteria deptVC = deptVOImpl.getViewCriteria("DepartmentVC");
        VariableValueManager vvm = deptVC.ensureVariableManager();
        Array arr = getValueAsArray(new String[] { "Administration", "Marketing" });
        vvm.setVariableValue("bindVarArrayOfDeptNames", arr);
        deptVOImpl.applyViewCriteria(deptVC);
        deptVOImpl.executeQuery();
        System.out.println("Size-" + deptVOImpl.getEstimatedRowCount());
    }

    /**
     * This method converst string array to oracle.jbo.domain.Array
     * @param deptArray
     * @return
     */
    public Array getValueAsArray(String[] deptArray) {
        Array arr = null;
        try {

            arr = new Array(deptArray);
            HashMap context = new HashMap();
            context.put(DomainContext.ELEMENT_SQL_NAME, "CHARTABLETYPE");
            //CHARTABLETYPE is DB object table of varchar2(4000)
            context.put(DomainContext.ELEMENT_TYPE, String.class);
            arr.setContext(null, null, context);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return arr;
    }

    /**
     * Allows subclasses to retrieve custom data from an XML-node under the given
     * parent element. Specifies the current row for
     * which the key has been passivated.
     * @param parent the name of the parent element under which the custom data resides.
     */
    protected void activateState(Element parent) {
        super.activateState(parent);
    }

    /**
     * Container's getter for ContactVO1.
     * @return ContactVO1
     */
    public ViewObjectImpl getContactDetails() {
        return (ViewObjectImpl)findViewObject("ContactDetails");
    }

    public void executeDepermentVO() {
        this.getDepartments().executeQuery();
    }

    /**
     * This method generates dynmaic enity defnition and view object defitnition for
     * DEPARTTMENTS table and add it to AM instance
     */
    public void buildDynamicDeptViewCompAndAddtoAM() {
        //Check if view definition exist for DYNAMIC_DETP_VO_INSTANCE
        ViewObject internalDynamicVO = findViewObject(DYNAMIC_DETP_VO_INSTANCE);
        if (internalDynamicVO != null) {
            System.out.println("OK VO exists, return Defn- " + internalDynamicVO.getDefFullName());
            internalDynamicVO.executeQuery();
            while (internalDynamicVO.hasNext()) {
                Row row = internalDynamicVO.next();
                System.out.println("Row - " + row.getAttribute(1));
            }
            return;
        }
        //Build entity definition
        EntityDefImpl deptEntDef = buildDeptEntitySessionDef();
        //Build view object definition
        ViewDefImpl viewDef = buildDeptViewSessionDef(deptEntDef);
        //Add view object to application module
        addViewToPdefApplicationModule(viewDef);

    }

    /**
     * Build entity  definition for DEPARTMENTS table
     * @return
     */
    private EntityDefImpl buildDeptEntitySessionDef() {
        EntityDefImpl entDef =
            new EntityDefImpl(oracle.jbo.server.EntityDefImpl.DEF_SCOPE_SESSION, "DynamicDeptEntityDef");

        entDef.setFullName(entDef.getBasePackage() + ".dynamic." + entDef.getName());
        entDef.setName(entDef.getName());
        System.out.println("EntDef :" + entDef.getFileName());
        entDef.setAliasName(entDef.getName());
        //Set the database table name
        entDef.setSource("DEPARTMENTS");
        entDef.setSourceType(EntityDefImpl.DBOBJ_TYPE_TABLE);
        //Add the attributes
        entDef.addAttribute("DepartmentId", "DEPARTMENT_ID", Integer.class, true, false, true);
        entDef.addAttribute("DepartmentName", "DEPARTMENT_NAME", String.class, false, false, true);
        entDef.addAttribute("ManagerId", "MANAGER_ID", Integer.class, false, false, true);
        //Resolves various parts of the
        //entity definition before this definition object can be used.
        entDef.resolveDefObject();
     
        entDef.writeXMLContents();
        entDef.saveXMLContents();

        return entDef;
    }

    /**
     * Build view deintion for dept EntityDefImpl
     * @param entityDef
     * @return
     */
    private ViewDefImpl buildDeptViewSessionDef(EntityDefImpl entityDef) {
        ViewDefImpl viewDef =
            new oracle.jbo.server.ViewDefImpl(oracle.jbo.server.ViewDefImpl.DEF_SCOPE_SESSION, "DynamicDeptViewDef");

        viewDef.setFullName(viewDef.getBasePackage() + ".dynamic." + viewDef.getName());
        System.out.println("ViewDef :" + viewDef.getFileName());
        viewDef.setUseGlueCode(false);
        viewDef.setIterMode(RowIterator.ITER_MODE_LAST_PAGE_FULL);
        viewDef.setBindingStyle(SQLBuilder.BINDING_STYLE_ORACLE_NAME);
        viewDef.setSelectClauseFlags(ViewDefImpl.CLAUSE_GENERATE_RT);
        viewDef.setFromClauseFlags(ViewDefImpl.CLAUSE_GENERATE_RT);

        viewDef.addEntityUsage("DynamicDeptUsage", entityDef.getFullName(), false, false);

        viewDef.addAllEntityAttributes("DynamicDeptUsage");
        /**
         * It resolves attribute definitions
         * with its entity bases.
         */
        viewDef.resolveDefObject();
       
        viewDef.writeXMLContents();
        viewDef.saveXMLContents();

        return viewDef;
    }

    /**
     * Adds the view definition to application module
     * @param viewDef
     */
    private void addViewToPdefApplicationModule(ViewDefImpl viewDef) {
        oracle.jbo.server.PDefApplicationModule pDefAM =
            oracle.jbo.server.PDefApplicationModule.findDefObject(getDefFullName());

        if (pDefAM == null) {
            pDefAM = new oracle.jbo.server.PDefApplicationModule();
            pDefAM.setFullName(getDefFullName());
        }

        pDefAM.setEditable(true);
        pDefAM.createViewObject(DYNAMIC_DETP_VO_INSTANCE, viewDef.getFullName());

        pDefAM.applyPersonalization(this);

        pDefAM.writeXMLContents();
        pDefAM.saveXMLContents();
    }

    /**
     * An example to illistrae dynamic attribute defintion
     * This example adds LocationId to a Dept EO and VO
     */
    public void addExtraAttributeToDept() {
        //Add sttribute to entity first and if it reurn true
        //add it to view object
        if (addLocAttributeToDeptEntity()) {
            addLocAttributeToDeptView();
        }
    }

    /**
     * Add Location id to department view object
     * @return
     */
    private boolean addLocAttributeToDeptView() {
        ViewDefImpl viewDef = ViewDefImpl.findDefObject("sessiondef.dynamic.DynamicDeptViewDef");

        PDefViewObject pDefVO = (PDefViewObject)viewDef.getPersDef();
        //Create PDefViewObject for Dept View Def
        if (pDefVO == null) {
            pDefVO = new PDefViewObject();
            pDefVO.setFullName(viewDef.getFullName());
        }

        //Check if attribute location id LocationId exists
        if (pDefVO.getAttributeIndexOf(ATTRIB_LOC_ID) != -1) {
            return false;
        }
        pDefVO.setEditable(true);

        pDefVO.addEntityAttribute(ATTRIB_LOC_ID, "DynamicDeptUsage", ATTRIB_LOC_ID, true);
        pDefVO.applyPersonalization(findViewObject(DYNAMIC_DETP_VO_INSTANCE));

        pDefVO.writeXMLContents();
        pDefVO.saveXMLContents();
        return true;
    }

    /**
     * Add Location id to department entity object
     * @return
     */
    private boolean addLocAttributeToDeptEntity() {
        oracle.jbo.server.EntityDefImpl entDef =
            EntityDefImpl.findDefObject("sessiondef.dynamic.DynamicDeptEntityDef");
        //Create PDefEntityObject for Dept entity Def
        PDefEntityObject pDefEO = (PDefEntityObject)entDef.getPersDef();
        if (pDefEO == null) {
            pDefEO = new PDefEntityObject();
        }
        //Check if attribute location id LocationId exists
        if (pDefEO.getAttributeIndexOf(ATTRIB_LOC_ID) != -1) {
            return false;
        }
        pDefEO.setEditable(true);
        pDefEO.setFullName(entDef.getFullName());

        pDefEO.addAttribute(ATTRIB_LOC_ID, "LOCATION_ID", Integer.class, true);
        pDefEO.applyPersonalization(((oracle.jbo.server.DBTransactionImpl)getTransaction()).findEntityCache(entDef));

        pDefEO.writeXMLContents();
        pDefEO.saveXMLContents();
        return true;
    }

    /**
     * Container's getter for DepartmentProgrammaticVO1.
     * @return DepartmentProgrammaticVO1
     */
    public DepartmentProgrammaticVOImpl getDepartmentProgrammaticVO() {
        return (DepartmentProgrammaticVOImpl)findViewObject("DepartmentProgrammaticVO");
    }

    public void checkRowState() {
        ViewObject vo = getDepartments();
        while (vo.hasNext()) {
            ViewRowImpl row = (ViewRowImpl)vo.next();
            EntityImpl eo = row.getEntity(0);
            byte state = eo.getEntityState();
        }
    }

}
