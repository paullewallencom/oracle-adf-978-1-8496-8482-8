package com.packtpub.adfguide.ch5.model.view;

import oracle.jbo.CriteriaAdapter;
import oracle.jbo.Variable;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaItemValue;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.domain.Array;
import oracle.jbo.server.ViewCriteriaAdapter;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 04 16:40:14 IST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DepartmentVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public DepartmentVOImpl() {
    }

    public void undoChanges() {
        //this.getEntityDef(0).get
    }

    /**
     * Interpret the given ViewCriteriaItem and generate a where clause fragment
     * for the ViewCriteriaItem.
     * param vci
     * return
     */
    @Override
    public String getCriteriaItemClause(ViewCriteriaItem vci) {

        if (vci.getAttributeDef().getName().equals("DepartmentName") &&
            vci.getViewCriteria().getName().contains("DepartmentVC")) {
            if (vci.getViewCriteria().getRootViewCriteria().isCriteriaForQuery()) {
                return getINClauseForDatabaseUse(vci);
            } else {
                return getINClauseForCache(vci);
            }
        } else {
            return super.getCriteriaItemClause(vci);
        }

    }


    public String _getCriteriaItemClause(ViewCriteriaItem vci) {
        if (vci.getAttributeDef().getName().equals("DepartmentName") &&
            vci.getViewCriteria().getName().contains("DepartmentVC") &&
            hasBindVarValue(vci.getViewCriteria(), "bindVarDeptNames")) {
            String attrName = null;
            if (vci.getViewCriteria().isCriteriaForQuery()) {
                return getItemClauseForDatabaseUse(vci);
            } else {
                return getItemClauseForInMemoryUse(vci);
            }
        }
        return super.getCriteriaItemClause(vci);
    }

    protected String getItemClauseForDatabaseUse(ViewCriteriaItem vci) {
        String attrName = this.getEntityDef(0).getAliasName() + ".DEPARTMENT_NAME";
        return "((" + attrName + " = :bindVarDeptNames ) OR (" + attrName + " IS NULL))";
    }

    protected String getItemClauseForInMemoryUse(ViewCriteriaItem vci) {
        String attrName = "DepartmentName";
        return "((" + attrName + " = :bindVarDeptNames ) OR (" + attrName + " IS NULL))";
    }

    private boolean hasBindVarValue(ViewCriteria vc, String varName) {
        VariableValueManager varValueMgr = vc.ensureVariableManager();
        return varValueMgr.hasVariableValue(varName);

    }

    /**
     * Generates IN clause with Array
     * param vci
     * return
     */
    protected String getINClauseForDatabaseUse(ViewCriteriaItem vci) {

        String whereCluase = "1=1";
        if (getbindVarArrayOfDeptNames() != null) {

            whereCluase =
                    this.getEntityDef(0).getAliasName() + ".DEPARTMENT_NAME MEMBER OF CAST(:bindVarArrayOfDeptNames AS CHARTABLETYPE)";
        }
        return whereCluase;
    }

    /**
     * Generates query for in memory filtering
     * param vci
     * return
     */
    protected String getINClauseForCache(ViewCriteriaItem vci) {
        String whereCluase = "1=1";
        return whereCluase;
    }

    private boolean initBindVarArrayOfDeptNames() {
        String commaDelimitedValue = getbindVarDeptNames();
        System.out.println("convertToArray : " + commaDelimitedValue);
        if (commaDelimitedValue == null) {
            return false;
        }

        String[] splittArray = commaDelimitedValue.split(",");
        Array arr = new Array(splittArray);
        this.ensureVariableManager().setVariableValue("bindVarArrayOfDeptNames", arr);
        return true;
    }

    /**
     * Returns the variable value for bindVarArrayOfDeptNames.
     * return variable value for bindVarArrayOfDeptNames
     */
    public Array getbindVarArrayOfDeptNames() {
        return (Array)ensureVariableManager().getVariableValue("bindVarArrayOfDeptNames");
    }

    /**
     * Sets <code>value</code> for variable bindVarArrayOfDeptNames.
     * param value value to bind as bindVarArrayOfDeptNames
     */
    public void setbindVarArrayOfDeptNames(Array value) {
        ensureVariableManager().setVariableValue("bindVarArrayOfDeptNames", value);
    }

    /**
     * Returns the bind variable value for bindVarDeptNames.
     * return bind variable value for bindVarDeptNames
     */
    public String getbindVarDeptNames() {
        return (String)getNamedWhereClauseParam("bindVarDeptNames");
    }

    /**
     * Sets <code>value</code> for bind variable bindVarDeptNames.
     * param value value to bind as bindVarDeptNames
     */
    public void setbindVarDeptNames(String value) {
        setNamedWhereClauseParam("bindVarDeptNames", value);
    }

    /**
     * Return a custom CriteriaAdapter implementation to generate where clause
     * for ViewCriteria. The default implementation here returns null, and leave
     * it to the ViewCriteriaManager implementation class to determine which
     * CriteriaAdapter class to use.
     * Subclasses can override this method to provide a custom CriteriaAdapter
     * implementation.
     *
     * return Custom CriteriaAdapter implementation if desired, or null.
     */
    @Override
    public CriteriaAdapter getCriteriaAdapter() {

        CustomCriteriaAdapterImpl customCriteriaAdapterImpl = new CustomCriteriaAdapterImpl();
        return customCriteriaAdapterImpl;
    }

    /**
     * Generates the WHERE clause expression from the applied view criterias.
     * This method is responsible for converting the applied view criterias
     * into a WHERE clause expression.
     * <p>
     *
     * param forQuery indicates whether the WHERE clause returned will be
     *                 used in a database query or in-memory filtering.  If
     *                 <tt>true</tt>, the clause is for database query.
     * return the WHERE clause to be used for either database query or
     *         in-memory filtering.
     */
    @Override
    public String getViewCriteriaClause(boolean forQuery) {
        ViewCriteria[] vcs =
            getApplyViewCriterias(forQuery ? ViewCriteria.CRITERIA_MODE_QUERY : ViewCriteria.CRITERIA_MODE_CACHE);
        if (vcs != null && vcs.length > 0) {
            for (ViewCriteria vc : vcs) {
                if (!vc.isUpperColumns()) {
                    vc.setUpperColumns(true);
                }
            }
        }
        if (forQuery) {
            modifyViewCriteriaForDatabaseUse();
        } else {
            modifyViewCriteriaForInMemoryUse();
        }
        return super.getViewCriteriaClause(forQuery);
    }

    protected void modifyViewCriteriaForDatabaseUse() {
        // Override to do something useful here
    }

    protected void modifyViewCriteriaForInMemoryUse() {
        // Override to do something useful here
    }


    /**
     *  Prepare view object for build query.
     *  In non SI mode, do nothing.
     *  In SI mode,
     *  <ul>
     *    <li> activate the attributes in mNewSelectAttrNameset</li>
     *    <li> activate the attributes that are the source field of links to
     *         child view objects</li>
     *    <li> activate entity objects that are used in the WHERE or ORDER BY
     *         or GROUP BY but not the select</li>
     *    <li> activate join constraint view criteria if necessary</li>
     *  </ul>
     */
    @Override
    public void prepareVOForQuery() {
        super.prepareVOForQuery();
        //Check if the LOC_CRITERIA is already applied on the VO
        //If yes, returns from this method
        String[] vcnames = getViewCriteriaManager().getApplyViewCriteriaNames();
        if (vcnames != null) {
            for (String name : vcnames) {
                if (name.equals("LOC_CRITERIA")) {
                    return;
                }
            }
        } // The following code create LOC_CRITERIA
        //and applies it to the VO.
        //This view criteria hold a condition to read
        //department rows from logged-in user’s location
        ViewCriteria vc = createViewCriteria();
        vc.setName("LOC_CRITERIA");
        vc.setConjunction(ViewCriteria.VC_CONJ_AND);
        ViewCriteriaRow vcr = vc.createViewCriteriaRow();
        vc.insertRow(vcr);
        ViewCriteriaItem vci = vcr.ensureCriteriaItem("LocationId");
        vci.setOperator("=");
        ViewCriteriaItemValue vciv = vci.getValues().get(0);
        vciv.setValue(getLoggedInLocId());
        applyViewCriteria(vc, true);
    }

    public Integer getLoggedInLocId() {
        return new Integer(1700);
    }

    /**
     * Returns the variable value for bindVarLoggedInLoc.
     * return variable value for bindVarLoggedInLoc
     */
    public Integer getbindVarLoggedInLoc() {
        return (Integer)ensureVariableManager().getVariableValue("bindVarLoggedInLoc");
    }

    /**
     * Sets <code>value</code> for variable bindVarLoggedInLoc.
     * param value value to bind as bindVarLoggedInLoc
     */
    public void setbindVarLoggedInLoc(Integer value) {
        ensureVariableManager().setVariableValue("bindVarLoggedInLoc", value);
    }


}
