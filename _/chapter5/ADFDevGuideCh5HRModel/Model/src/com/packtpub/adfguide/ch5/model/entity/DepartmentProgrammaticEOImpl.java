package com.packtpub.adfguide.ch5.model.entity;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import java.sql.Types;

import oracle.jbo.AlreadyLockedException;
import oracle.jbo.JboException;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Nov 13 18:05:28 IST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DepartmentProgrammaticEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DepartmentId {
            public Object get(DepartmentProgrammaticEOImpl obj) {
                return obj.getDepartmentId();
            }

            public void put(DepartmentProgrammaticEOImpl obj, Object value) {
                obj.setDepartmentId((Integer)value);
            }
        },
        DepartmentName {
            public Object get(DepartmentProgrammaticEOImpl obj) {
                return obj.getDepartmentName();
            }

            public void put(DepartmentProgrammaticEOImpl obj, Object value) {
                obj.setDepartmentName((String)value);
            }
        },
        ManagerId {
            public Object get(DepartmentProgrammaticEOImpl obj) {
                return obj.getManagerId();
            }

            public void put(DepartmentProgrammaticEOImpl obj, Object value) {
                obj.setManagerId((Integer)value);
            }
        },
        LocationId {
            public Object get(DepartmentProgrammaticEOImpl obj) {
                return obj.getLocationId();
            }

            public void put(DepartmentProgrammaticEOImpl obj, Object value) {
                obj.setLocationId((Integer)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DepartmentProgrammaticEOImpl object);

        public abstract void put(DepartmentProgrammaticEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int DEPARTMENTNAME = AttributesEnum.DepartmentName.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int LOCATIONID = AttributesEnum.LocationId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DepartmentProgrammaticEOImpl() {
    }


    /**
     * Gets the attribute value for DepartmentId, using the alias name DepartmentId.
     * @return the value of DepartmentId
     */
    public Integer getDepartmentId() {
        return (Integer)getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentId.
     * @param value value to set the DepartmentId
     */
    public void setDepartmentId(Integer value) {
        setAttributeInternal(DEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for DepartmentName, using the alias name DepartmentName.
     * @return the value of DepartmentName
     */
    public String getDepartmentName() {
        return (String)getAttributeInternal(DEPARTMENTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentName.
     * @param value value to set the DepartmentName
     */
    public void setDepartmentName(String value) {
        setAttributeInternal(DEPARTMENTNAME, value);
    }

    /**
     * Gets the attribute value for ManagerId, using the alias name ManagerId.
     * @return the value of ManagerId
     */
    public Integer getManagerId() {
        return (Integer)getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ManagerId.
     * @param value value to set the ManagerId
     */
    public void setManagerId(Integer value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for LocationId, using the alias name LocationId.
     * @return the value of LocationId
     */
    public Integer getLocationId() {
        return (Integer)getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LocationId.
     * @param value value to set the LocationId
     */
    public void setLocationId(Integer value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.packtpub.adfguide.ch5.model.entity.DepartmentProgrammaticEO");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Override the default doSelect processing
     * to invoke an appropriate stored procedure
     * instead of performing the default one.
     * @param lock
     */
    @Override
    protected void doSelect(boolean lock) {
        if (lock) {
            callLockProcedureAndCheckForRowInconsistency();
        } else {
            callSelectProcedure();
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    @Override
    protected void doDML(int operation, TransactionEvent e) {
        /**
       * Call appropriate stored proc, checking operation flag set for entity tow
       */
        if (operation == DML_INSERT)
            callInsertProcedure(e);
        else if (operation == DML_UPDATE)
            callUpdateProcedure(e);
        else if (operation == DML_DELETE)
            callDeleteProcedure(e);
    }

    /**
     *Invokes procedure for delete
     * @param e
     */
    protected void callDeleteProcedure(TransactionEvent e) {
        callStoredProcedure("departments_api.delete_department(?)", new Object[] { getDepartmentId() });
    }

    /**
     *Invokes procedure for insert
     * @param e
     */
    protected void callInsertProcedure(TransactionEvent e) {
        callStoredProcedure("departments_api.insert_department(?,?,?,?)",
                            new Object[] { getDepartmentId(), getDepartmentName(), getManagerId(), getLocationId() });
    }

    /**
     *Invokes procedure for update
     * @param e
     */
    protected void callUpdateProcedure(TransactionEvent e) {
        callStoredProcedure("departments_api.update_department(?,?,?,?)",
                            new Object[] { getDepartmentId(), getDepartmentName(), getManagerId(), getLocationId() });
    }

    /**
     * Call procedure for locking the row and checks if the columns for the row has been
     * modified by another user in database
     */
    protected void callLockProcedureAndCheckForRowInconsistency() {
        String stmt = "begin departments_api.lock_department(?,?,?,?);end;";
        CallableStatement st = getDBTransaction().createCallableStatement(stmt, 0);
        try {
            // Register the OUT parameters and types
            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.NUMERIC);
            st.registerOutParameter(4, Types.NUMERIC);
            //Register IN parameter
            st.setObject(1, getDepartmentId());
            st.executeUpdate();
            String deptNameInDB = st.getString(2);
            Object managerIdInDB = st.getObject(3);
            Object locIdInDB = st.getObject(4);

            compareOldAttrTo(DEPARTMENTNAME, deptNameInDB);
            compareOldAttrTo(MANAGERID,
                             managerIdInDB != null ? (new Integer(((BigDecimal)managerIdInDB).intValue())) : managerIdInDB);
            compareOldAttrTo(LOCATIONID,
                             locIdInDB != null ? (new Integer(((BigDecimal)locIdInDB).intValue())) : locIdInDB);

        } catch (SQLException e) {
            if (Math.abs(e.getErrorCode()) == 54) {
                throw new AlreadyLockedException(e);
            } else {
                throw new JboException(e);
            }
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    //Something went wrong while closing statement,log error
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Helper method for calling stored procedure
     */
    protected void callSelectProcedure() {
        String stmt = "begin departments_api.select_department(?,?,?,?);end;";
        // 1. Create a CallableStatement for the PLSQL block to invoke
        CallableStatement st = getDBTransaction().createCallableStatement(stmt, 0);
        try {
            // Register the OUT parameters and types
            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.NUMERIC);
            st.registerOutParameter(4, Types.NUMERIC);
            //Register IN parameter
            st.setObject(1, getDepartmentId());
            // Execute the statement
            st.executeUpdate();
            // Retrieve the possibly updated column values
            String deptNameInDB = st.getString(2);
            Object managerIdInDB = st.getObject(3);
            Object locIdInDB = st.getObject(4);
            // Populate the possibly updated attribute values in the row
            populateAttribute(DEPARTMENTNAME, deptNameInDB, true, false, false);
            populateAttribute(MANAGERID, managerIdInDB, true, false, false);
            populateAttribute(LOCATIONID, locIdInDB, true, false, false);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Closing the statement
                    st.close();
                } catch (SQLException e) {
                    //Something went wrong while closing statement,log error
                    e.printStackTrace();
                }
            }
        }
    }


    /**
     * Helper menthod for calling a stored procedure with bind variables
     *
     * @param stmt stored procedure statement to execute
     * @param bindVars Object array of parameters
     */
    protected void callStoredProcedure(String stmt, Object[] bindVars) {
        PreparedStatement st = null;
        try {
            st = getDBTransaction().createPreparedStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                }
            }
            st.executeUpdate();
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    //Something went wrong while closing statement,log error
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Helps method to detect whether old attribute values
     * are different from new attribute values retrieved at
     * locking time.
     * @param attrIndex
     * @param newVal
     */
    protected void compareOldAttrTo(int attrIndex, Object newVal) {
        if ((getPostedAttribute(attrIndex) == null && newVal != null) ||
            (getPostedAttribute(attrIndex) != null && newVal == null) ||
            (getPostedAttribute(attrIndex) != null && newVal != null &&
             !getPostedAttribute(attrIndex).equals(newVal))) {
            throw new RowInconsistentException(getKey());
        }
    }
}
