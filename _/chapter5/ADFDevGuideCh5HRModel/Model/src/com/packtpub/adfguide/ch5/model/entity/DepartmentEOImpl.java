package com.packtpub.adfguide.ch5.model.entity;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 02 15:32:59 IST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DepartmentEOImpl extends EntityImpl {
    /**
     * Removes the row from the database table.
     * <p>
     *
     * In the case of a composition where this Entity is a master, this method calls
     * {@link #vetoRemoveWithDetails(AttributeDef associationDef) vetoRemoveWithDetails}
     * with an Association attribute that defines the composition,
     * to perform a check for existence of detail Rows.
     * <p>
     *
     * Override this method to add your own business logic for the remove operation.
     * For example, you can implement business logic that throws an exception that report
     * why an Entity Object cannot be removed.
     * <p>
     *
     * @throws oracle.jbo.RemoveWithDetailsException if an attempt is made to
     *            is made to remove the master Entity Object before removing its
     *            children.
     */
    public void remove() {
        if (isInUseByOtherApps())
            super.remove();
        else
            throw new JboException("Row is in use by another system");
    }

    public boolean isInUseByOtherApps() {
        return false;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DepartmentId {
            public Object get(DepartmentEOImpl obj) {
                return obj.getDepartmentId();
            }

            public void put(DepartmentEOImpl obj, Object value) {
                obj.setDepartmentId((Integer)value);
            }
        },
        DepartmentName {
            public Object get(DepartmentEOImpl obj) {
                return obj.getDepartmentName();
            }

            public void put(DepartmentEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ManagerId {
            public Object get(DepartmentEOImpl obj) {
                return obj.getManagerId();
            }

            public void put(DepartmentEOImpl obj, Object value) {
                obj.setManagerId((Integer)value);
            }
        },
        LocationId {
            public Object get(DepartmentEOImpl obj) {
                return obj.getLocationId();
            }

            public void put(DepartmentEOImpl obj, Object value) {
                obj.setLocationId((Integer)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DepartmentEOImpl object);

        public abstract void put(DepartmentEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public final int LOGGED_IN_CITY_HISTORY_TYPE = 11;

    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int DEPARTMENTNAME = AttributesEnum.DepartmentName.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int LOCATIONID = AttributesEnum.LocationId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DepartmentEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.packtpub.adfguide.ch5.model.entity.DepartmentEO");
    }

    /**
     * Gets the attribute value for DepartmentId, using the alias name DepartmentId.
     * @return the value of DepartmentId
     */
    public Integer getDepartmentId() {
        return (Integer)getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentId.
     * @param value value to set the DepartmentId
     */
    public void setDepartmentId(Integer value) {
        setAttributeInternal(DEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for DepartmentName, using the alias name DepartmentName.
     * @return the value of DepartmentName
     */
    public String getDepartmentName() {
        return (String)getAttributeInternal(DEPARTMENTNAME);
    }


    /**
     * Gets the attribute value for ManagerId, using the alias name ManagerId.
     * @return the value of ManagerId
     */
    public Integer getManagerId() {
        return (Integer)getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ManagerId.
     * @param value value to set the ManagerId
     */
    public void setManagerId(Integer value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for LocationId, using the alias name LocationId.
     * @return the value of LocationId
     */
    public Integer getLocationId() {
        return (Integer)getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LocationId.
     * @param value value to set the LocationId
     */
    public void setLocationId(Integer value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param departmentId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer departmentId) {
        return new Key(new Object[] { departmentId });
    }

    @Override
    protected Object getHistoryContextForAttribute(AttributeDefImpl attr) {
        if (attr.getHistoryKind() == LOGGED_IN_CITY_HISTORY_TYPE) {
            int attribIndex = AttributesEnum.DepartmentName.index();
            return ADFContext.getCurrent().getSecurityContext().getUserProfile().getBusinessCity();
        }
        return super.getHistoryContextForAttribute(attr);
    }

    private void test() {

    }
}
