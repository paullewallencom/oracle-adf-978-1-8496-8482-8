package com.packtpub.adfguide.ch3.model.service;

import com.packtpub.adfguide.ch3.model.entity.DepartmentEOImpl;
import com.packtpub.adfguide.ch3.model.entity.EmployeeEODefImpl;
import com.packtpub.adfguide.ch3.model.entity.EmployeeEOImpl;

import com.packtpub.adfguide.ch3.model.entity.inheritance.MarketingBaseEmployeeEOImpl;
import com.packtpub.adfguide.ch3.model.service.common.HRServiceAppModule;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 22 15:02:14 IST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HRServiceAppModuleImpl extends ApplicationModuleImpl implements HRServiceAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public HRServiceAppModuleImpl() {
    }

    public void test() {

        EmployeeEOImpl eo = findEmployeeByEmail("JRUSSEL");
        System.out.println(eo.getFirstName());

    }

    /**
     * Finds the Deprtament by Id and then idnetify
     * employee using asscoictation accessor
     * @param deptId
     */
    public void findDepeartmentAndEmployees(Integer deptId) {
        //Get defnition object
        EntityDefImpl departmentEODef = DepartmentEOImpl.getDefinitionObject();
        Key deptIdKey = DepartmentEOImpl.createPrimaryKey(new Integer(deptId));
        //Find department by ID
        DepartmentEOImpl departmentEOImpl =
            (DepartmentEOImpl)departmentEODef.findByPrimaryKey(getDBTransaction(), deptIdKey);
        //Get the employees belonging to department using association accessor
        RowIterator rowIter = departmentEOImpl.getEmployeeEO();
        while (rowIter.hasNext()) {
            Row row = rowIter.next();
            System.out.println(row.getAttribute("FirstName"));
        }

    }

    /**
     * Creates an Employee instance
     * @return
     */
    public EmployeeEOImpl createEmployee() {
        //Get the EmployeeEODefImpl which is the java repsentstaion of EmployeeEO.xml
        EmployeeEODefImpl employeeEODefImpl = (EmployeeEODefImpl)EmployeeEOImpl.getDefinitionObject();
        //Create the entiy instance in the current transaction
        EmployeeEOImpl newEmployee = (EmployeeEOImpl)employeeEODefImpl.createInstance2(this.getDBTransaction(), null);
        //EmployeeID is sequence generated which is specified groovy expression, rest is taken care by the framework
        //Populate the other attributes
        newEmployee.setFirstName("Jobinesh");
        newEmployee.setLastName("Purushothaman");
        newEmployee.setDepartmentId(10);
        newEmployee.setEmail("JOBINESH@XYZ.COM");
        newEmployee.setHireDate(new Timestamp(System.currentTimeMillis()));
        newEmployee.setJobId("IT_PROG");
        try {
            //Commit the transaction
            // getDBTransaction().commit();
        } catch (JboException ex) {
            //If commit fails, then roll back the entire transaction
            getDBTransaction().rollback();
            throw ex;
        }
        return newEmployee;
    }


    /**
     * Find employee by PK
     * @param empId
     * @return
     */
    public EmployeeEOImpl findEmployeeById(int empId) {

        EntityDefImpl employeeEODef = EmployeeEOImpl.getDefinitionObject();
        Key empIdKey = EmployeeEOImpl.createPrimaryKey(new Integer(empId));
        return (EmployeeEOImpl)employeeEODef.findByPrimaryKey(getDBTransaction(), empIdKey);
    }

    /**
     * Find employee by alt Key - Email
     * @param email
     * @return
     */
    public EmployeeEOImpl findEmployeeByEmail(String email) {
        EntityDefImpl employeeEODef = EmployeeEOImpl.getDefinitionObject();
        Key emailAltKey = new Key(new Object[] { email });
        return (EmployeeEOImpl)employeeEODef.findByAltKey(getDBTransaction(), "EmailAltKey", emailAltKey, false, true);

    }

    /**
     * Search on employee entities in the hierarchy
     * @param empId
     * @return
     */
    public MarketingBaseEmployeeEOImpl findAllMarketingEmployees(int empId) {

        EntityDefImpl employeeEODef = MarketingBaseEmployeeEOImpl.getDefinitionObject();
        Key empIdKey = MarketingBaseEmployeeEOImpl.createPrimaryKey(new Integer(empId));
        return (MarketingBaseEmployeeEOImpl)employeeEODef.findByPKExtended(getDBTransaction(), empIdKey, true);
    }


    /**
     * Commits the transaction
     */
    public void commit() {
        try {
            getDBTransaction().commit();
        } catch (JboException ex) {
            getDBTransaction().rollback();
            throw ex;
        }
    }

    /**
     * Container's getter for MarketingBaseEmployeeEOView1.
     * @return MarketingBaseEmployeeEOView1
     */
    public ViewObjectImpl getMarketingBaseEmployeeEOView1() {
        return (ViewObjectImpl)findViewObject("MarketingBaseEmployeeEOView1");
    }

    /**
     * Container's getter for SalesSubEmployeeEOView1.
     * @return SalesSubEmployeeEOView1
     */
    public ViewObjectImpl getSalesSubEmployeeEOView1() {
        return (ViewObjectImpl)findViewObject("SalesSubEmployeeEOView1");
    }

    /**
     * Container's getter for ExecutiveSubEmployeeEOView1.
     * @return ExecutiveSubEmployeeEOView1
     */
    public ViewObjectImpl getExecutiveSubEmployeeEOView1() {
        return (ViewObjectImpl)findViewObject("ExecutiveSubEmployeeEOView1");
    }

    /**
     * Container's getter for EmployeeDBViewVO1.
     * @return EmployeeDBViewVO1
     */
    public ViewObjectImpl getEmployeeDBViewVO1() {
        return (ViewObjectImpl)findViewObject("EmployeeDBViewVO1");
    }

    /**
     * Container's getter for EmployeeVO1.
     * @return EmployeeVO1
     */
    public ViewObjectImpl getEmployeeVO1() {
        return (ViewObjectImpl)findViewObject("EmployeeVO1");
    }
}
