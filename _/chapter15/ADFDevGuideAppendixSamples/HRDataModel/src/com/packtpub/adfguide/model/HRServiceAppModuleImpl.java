package com.packtpub.adfguide.model;

import com.packtpub.adfguide.model.common.HRServiceAppModule;

import com.packtpub.adfguide.model.common.TxnAppModule;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.PDefViewObject;
import oracle.jbo.server.SQLBuilder;
import oracle.jbo.server.ViewDefImpl;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Sep 02 10:18:40 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HRServiceAppModuleImpl extends ApplicationModuleImpl implements HRServiceAppModule {
    private static final String DYNAMIC_DETP_VO_INSTANCE = "DynamicDeptVO";
    private static final String ATTRIB_LOC_ID = "LocationId";

    /**
     * This is the default constructor (do not remove).
     */
    public HRServiceAppModuleImpl() {
    }

    /**
     * This method generates dynmaic enity defnition and view object defitnition for
     * DEPARTTMENTS table and add it to AM instance
     */
    public void buildDynamicDeptViewCompAndAddtoAM() {
        //Check if view definition exist for DYNAMIC_DETP_VO_INSTANCE
        ViewObject internalDynamicVO = findViewObject(DYNAMIC_DETP_VO_INSTANCE);
        if (internalDynamicVO != null) {
            return;
        }
        //Build entity definition
        EntityDefImpl deptEntDef = buildDeptEntitySessionDef();
        //Build view object definition
        ViewDefImpl viewDef = buildDeptViewSessionDef(deptEntDef);
        //Add view object to application module
        addViewToPdefApplicationModule(viewDef);

    }

    /**
     * Build entity  definition for DEPARTMENTS table
     * @return
     */
    private EntityDefImpl buildDeptEntitySessionDef() {
        EntityDefImpl entDef =
            new EntityDefImpl(oracle.jbo.server.EntityDefImpl.DEF_SCOPE_SESSION, "DynamicDeptEntityDef");

        entDef.setFullName(entDef.getBasePackage() + ".dynamic." + entDef.getName());
        entDef.setName(entDef.getName());
        entDef.setAliasName(entDef.getName());
        //Set the database table name
        entDef.setSource("DEPARTMENTS");
        entDef.setSourceType(EntityDefImpl.DBOBJ_TYPE_TABLE);
        //Add the attributes
        entDef.addAttribute("DepartmentId", "DEPARTMENT_ID", Integer.class, true, false, true);
        entDef.addAttribute("DepartmentName", "DEPARTMENT_NAME", String.class, false, false, true);
        entDef.addAttribute("ManagerId", "MANAGER_ID", Integer.class, false, false, true);
        //Resolves various parts of the
        //entity definition before this definition object can be used.
        entDef.resolveDefObject();

        entDef.writeXMLContents();
        entDef.saveXMLContents();

        return entDef;
    }

    /**
     * Build view deintion for dept EntityDefImpl
     * @param entityDef
     * @return
     */
    private ViewDefImpl buildDeptViewSessionDef(EntityDefImpl entityDef) {
        ViewDefImpl viewDef =
            new oracle.jbo.server.ViewDefImpl(oracle.jbo.server.ViewDefImpl.DEF_SCOPE_SESSION, "DynamicDeptViewDef");

        viewDef.setFullName(viewDef.getBasePackage() + ".dynamic." + viewDef.getName());
        System.out.println("ViewDef :" + viewDef.getFileName());
        viewDef.setUseGlueCode(false);
        viewDef.setIterMode(RowIterator.ITER_MODE_LAST_PAGE_FULL);
        viewDef.setBindingStyle(SQLBuilder.BINDING_STYLE_ORACLE_NAME);
        viewDef.setSelectClauseFlags(ViewDefImpl.CLAUSE_GENERATE_RT);
        viewDef.setFromClauseFlags(ViewDefImpl.CLAUSE_GENERATE_RT);

        viewDef.addEntityUsage("DynamicDeptUsage", entityDef.getFullName(), false, false);

        viewDef.addAllEntityAttributes("DynamicDeptUsage");
        /**
         * It resolves attribute definitions
         * with its entity bases.
         */
        viewDef.resolveDefObject();

        viewDef.writeXMLContents();
        viewDef.saveXMLContents();

        return viewDef;
    }

    /**
     * Adds the view definition to application module
     * @param viewDef
     */
    private void addViewToPdefApplicationModule(ViewDefImpl viewDef) {
        oracle.jbo.server.PDefApplicationModule pDefAM =
            oracle.jbo.server.PDefApplicationModule.findDefObject(getDefFullName());

        if (pDefAM == null) {
            pDefAM = new oracle.jbo.server.PDefApplicationModule();
            pDefAM.setFullName(getDefFullName());
        }

        pDefAM.setEditable(true);


        pDefAM.createViewObject(DYNAMIC_DETP_VO_INSTANCE, viewDef.getFullName());

        pDefAM.applyPersonalization(this);

        pDefAM.writeXMLContents();
        pDefAM.saveXMLContents();
    }


    /**
     * This method defined in application module. It
     * generates dynamic view object definition
     * at runtime
     */
    public void createSQLBasedDepartmentViewObject() {
        //Remove view object if already exists
        ViewObject vo = findViewObject(DYNAMIC_DETP_VO_INSTANCE);
        if (vo != null)
            vo.remove();

        // Create a new "com.packtpub.adfguide.DepartmentView"
        //view definition
        ViewDefImpl deptViewDef = new ViewDefImpl("com.packtpub.adfguide.DepartmentView");
        // Define the names and types of the view attributes
        deptViewDef.addViewAttribute("DepartmentId", "DEPARTMENT_ID", Integer.class);
        deptViewDef.addViewAttribute("DepartmentName", "DEPARTMENT_NAME", String.class);
        deptViewDef.addViewAttribute("LocationId", "LOCATION_ID", Integer.class);
        // Define the SQL query that this view object will perform
        deptViewDef.setQuery("SELECT DEPARTMENT_ID," + "DEPARTMENT_NAME, LOCATION_ID FROM DEPARTMENTS");
        deptViewDef.setFullSql(true);
        deptViewDef.setBindingStyle(SQLBuilder.BINDING_STYLE_ORACLE_NAME);
        deptViewDef.resolveDefObject();
        // Create an instance of the new view definition named
        //"Departments"
        vo = createViewObject(DYNAMIC_DETP_VO_INSTANCE, deptViewDef);
    }


    /**
     * This method is defined in application module. It creates
     * view object from query statement
     */
    public void createDynamicVOFromQuery() {
        //Remove view object if already exists
        ViewObject vo = findViewObject(DYNAMIC_DETP_VO_INSTANCE);
        if (vo != null)
            vo.remove();
        String query =
            "SELECT Departments.DEPARTMENT_ID, " + "       Departments.DEPARTMENT_NAME, " + "       Departments.MANAGER_ID, " +
            "       Departments.LOCATION_ID " + "FROM DEPARTMENTS Departments";
        vo = createViewObjectFromQueryStmt(DYNAMIC_DETP_VO_INSTANCE, query);
        //vo.executeQuery();
    }

    /**
     * Generate composite VO
     */
    public void createCompositeDeptEmpVO() {


        ViewDefImpl compVODef = (ViewDefImpl)createCompositeViewDef("DeptEmpDetail", "DeptEmpDetail");
        compVODef.addViewUsage("Dept", "com.packtpub.adfguide.model.DepartmentVO");
        compVODef.addViewUsage("Emp", "com.packtpub.adfguide.model.EmployeeVO",
                               "com.packtpub.adfguide.model.DeptToEmpViewLink", "EmployeeVO", "Dept");
        compVODef.addAllRowAttributes("Dept");
        compVODef.addRowAttribute("EmployeeId", "Emp", "EmployeeId");
        compVODef.addRowAttribute("FirstName", "Emp", "FirstName");
        compVODef.addRowAttribute("LastName", "Emp", "LastName");
        compVODef.addRowAttribute("EmpDepartmentId", "Emp", "DepartmentId");
        compVODef.addRowAttribute("HireDate", "Emp", "HireDate");

        ViewCriteria vc = compVODef.createViewCriteria();
        ViewCriteriaRow vcr = vc.createViewCriteriaRow();
        ViewCriteriaItem vcItem = vcr.ensureCriteriaItem("HireDate");
        vcItem.setOperator(">=");
        vcItem.setValue("2008-02-13");
        vc.add(vcr);
        compVODef.putViewCriteria("DeptEmpDetailVC", vc);

        compVODef.setOrderByClause("DepartmentName, FirstName");
        compVODef.resolveDefObject();
        compVODef.writeXMLContents();
        compVODef.saveXMLContents();

        ViewObjectImpl compDeptEmpVO = (ViewObjectImpl)createViewObject("DeptEmpDetail", compVODef.getFullName());
        compDeptEmpVO.getViewCriteriaManager().setApplyViewCriteriaName("DeptEmpDetailVC");
        // If needed, retrieve the composite VO SQL statement
        String sqlQueryStmt = compDeptEmpVO.getQuery();
        System.out.println("sqlQueryStmt -" + sqlQueryStmt);
        // If you want the data, iterate it like a normal view object.
        compDeptEmpVO.setForwardOnly(true);
        compDeptEmpVO.executeQuery();
        while (compDeptEmpVO.hasNext()) {
            Row r = compDeptEmpVO.next();
            System.out.println(r.getAttribute(0) + "-" + r.getAttribute(5));
            // Process current row in whatever way is needed
        }
    }

    /**
     * Container's getter for DepartmentVO1.
     * @return DepartmentVO1
     */
    public ViewObjectImpl getDepartments() {
        return (ViewObjectImpl)findViewObject("Departments");
    }

    /**
     * Container's getter for DepartmentUpdtableVO1.
     * @return DepartmentUpdtableVO1
     */
    public ViewObjectImpl getDepartmentUpdtableVO1() {
        return (ViewObjectImpl)findViewObject("DepartmentUpdtableVO1");
    }

    public void nestAMIfRequiredAndInvokeMethod() {
        nestAMIfRequiredAndInvokeMethod_("TxnAppModule", "com.packtpub.adfguide.model.TxnAppModule");
    }

    /**
     * alter VO defn and save it to PDef object
     * @return
     */
    private boolean addLocAttributeToDeptView() {
        ViewDefImpl viewDef = ViewDefImpl.findDefObject("sessiondef.dynamic.DynamicDeptViewDef");
        PDefViewObject pDefVO = (PDefViewObject)viewDef.getPersDef();
        if (pDefVO == null) {
            pDefVO = new PDefViewObject();
            pDefVO.setFullName(viewDef.getFullName());
        }
        if (pDefVO.getAttributeIndexOf(ATTRIB_LOC_ID) != -1) {
            return false;
        }
        pDefVO.setEditable(true);
        pDefVO.addEntityAttribute(ATTRIB_LOC_ID, "DynamicDeptUsage", ATTRIB_LOC_ID, true);
        pDefVO.applyPersonalization(findViewObject(DYNAMIC_DETP_VO_INSTANCE));
        pDefVO.writeXMLContents();
        pDefVO.saveXMLContents();
        return true;
    }

    /**
     *
     * @param amName
     * @param defName
     */
    public void nestAMIfRequiredAndInvokeMethod_(String amName, String defName) {
        TxnAppModule txnAM = null;
        boolean generatedLocally = false;
        try {

            //Check whether the TxnAppModuleImpl is already nested
            txnAM = (TxnAppModule)getDBTransaction().getRootApplicationModule().findApplicationModule(amName);
            //create a new nested instance of the TxnAppModuleImpl, if not nested already
            if (txnAM == null) {
                txnAM = (TxnAppModule)this.getDBTransaction().createApplicationModule(defName);
                generatedLocally = true;
            }
            //Invoke business methods
            if (txnAM != null) {
                txnAM.updateEmployee();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            //Remove locally created AM once use is over
            if (generatedLocally && txnAM != null) {
                txnAM.remove();
            }
        }
    }
}
