package com.packtpub.adfguide.ch8.model.service;

import com.packtpub.adfguide.ch8.model.service.common.HRServiceAppModule;

import com.packtpub.adfguide.ch8.model.view.DepartmentVOImpl;


import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.SQLBuilder;
import oracle.jbo.server.ViewDefImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 13 13:30:32 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HRServiceAppModuleImpl extends ApplicationModuleImpl implements HRServiceAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public HRServiceAppModuleImpl() {
    }

    /**
     * Container's getter for Departments.
     * @return Departments
     */
    public DepartmentVOImpl getDepartments() {
        return (DepartmentVOImpl)findViewObject("Departments");
    }

    /**
     * Container's getter for Employees.
     * @return Employees
     */
    public ViewObjectImpl getEmployees() {
        return (ViewObjectImpl)findViewObject("Employees");
    }

    /**
     * Container's getter for Subordinates.
     * @return Subordinates
     */
    public ViewObjectImpl getSubordinates() {
        return (ViewObjectImpl)findViewObject("Subordinates");
    }

    /**
     * Container's getter for EmployeesForDepartment.
     * @return EmployeesForDepartment
     */
    public ViewObjectImpl getEmployeesForDepartment() {
        return (ViewObjectImpl)findViewObject("EmployeesForDepartment");
    }

    /**
     * Container's getter for EmpManagerFkLink1.
     * @return EmpManagerFkLink1
     */
    public ViewLinkImpl getEmpManagerFkLink1() {
        return (ViewLinkImpl)findViewLink("EmpManagerFkLink1");
    }

    /**
     * Container's getter for EmpDeptFkLink1.
     * @return EmpDeptFkLink1
     */
    public ViewLinkImpl getEmpDeptFkLink1() {
        return (ViewLinkImpl)findViewLink("EmpDeptFkLink1");
    }

    /**
     * This method adds node to child rowset of currently selected node identiified using
     * selectedNodeKey.
     * If no node is selected, new node is added as top level parent.
     * @param ri
     * @param selectedNodeKey
     */
    public void createChildren(RowIterator ri, Key selectedNodeKey) {

        final String deptViewDefName = "com.packtpub.adfguide.ch8.model.view.DepartmentVO";
        final String empViewDefName = "com.packtpub.adfguide.ch8.model.view.EmployeeVO";
        if (ri != null && selectedNodeKey != null) {
            System.out.println("selectedNodeKey-" + selectedNodeKey);
            //Find the Row, using selected node key
            Row[] found = ri.findByKey(selectedNodeKey, 1);
            if (found != null && found.length == 1) {
                Row foundRow = found[0];
                String nodeDefname = foundRow.getStructureDef().getDefFullName();
                //Identify the unelrying view object for the selected node
                //and insert new row as child to the selected node by accessing the
                //child rowset use accessor attribute
                if (nodeDefname.equals(deptViewDefName)) {
                    RowSet childRows = (RowSet)foundRow.getAttribute("Employees");
                    Row childrow = childRows.createRow();
                    System.out.println("Dept Id1:" + childrow.getAttribute("DepartmentId"));
                    childRows.insertRow(childrow);
                } else if (nodeDefname.equals(empViewDefName)) {
                    RowSet childRows = (RowSet)foundRow.getAttribute("Reportees");
                    Row childrow = childRows.createRow();
                    System.out.println("Dept Id2:" + childrow.getAttribute("DepartmentId"));
                    childRows.insertRow(childrow);
                }

            } else {
                //Row not found for selected node
                System.out.println("Node not Found for " + selectedNodeKey);
            }


        } else {
            // No node was selected when this method is called, create node at top level parent VO
            System.out.println(" param null try creating for first row : " + ri + " * " + selectedNodeKey);
            ViewObjectImpl vo = getDepartments();
            Row foundRow = vo.first();
            Row childrow = vo.createRow();
            vo.insertRow(childrow);
        }
    }

    /**
     * Deletes the selected node
     * @param ri
     * @param selectedNodeKey
     */
    public void deleteChildren(RowIterator ri, Key selectedNodeKey) {
        if (ri != null && selectedNodeKey != null) {
            Row[] rows = ri.findByKey(selectedNodeKey, 1);
            if (rows != null) {
                for (Row row : rows) {
                    row.remove();
                }

            } else {
                System.out.println("Node not Found for " + selectedNodeKey);
            }
        }
    }

    /**
     * Init
     * @param locationId
     */
    public void initSessionWithUserLoc(Integer locationId) {
        this.getSession().getUserData().put("USER_LOC", locationId);
    }

    public void createDepartmentViewObject() {
        // Create a new "com.packtpub.adfguide.ch8.DepartmentView" view definition
        ViewDefImpl deptViewDef = new ViewDefImpl("com.packtpub.adfguide.ch8.DepartmentView");
        // Define the names and types of the view attributes
        deptViewDef.addViewAttribute("DepartmentId", "DEPARTMENT_ID", Integer.class);
        deptViewDef.addViewAttribute("DepartmentName", "DEPARTMENT_NAME", String.class);
        deptViewDef.addViewAttribute("LocationId", "LOCATION_ID", Integer.class);
        // Define the SQL query that this view object will perform
        deptViewDef.setQuery("SELECT DEPARTMENT_ID,  DEPARTMENT_NAME, LOCATION_ID FROM DEPARTMENTS");
        deptViewDef.setFullSql(true);
        deptViewDef.setBindingStyle(SQLBuilder.BINDING_STYLE_ORACLE_NAME);
        deptViewDef.resolveDefObject();
        deptViewDef.registerDefObject();
        // Create an instance of the new view definition named "Departments"
        ViewObject deptView = createViewObject("Departments", deptViewDef);
    }
    /**
     * Method to refresh child nodes for a specifc department
     * @param deptId
     */
    public void refreshChildEmployees(Number deptId) {
        //Gets the VO used for parent node
        ViewObjectImpl vo = getDepartments();
        Row[] deptRow = vo.findByKey(new Key(new Object[] { deptId }), 1);
        //Get child rows RowSet view link accessor attribute and exuteQuery
        RowSet childRows = (RowSet)deptRow[0].getAttribute("Employees");
        childRows.executeQuery();
    }

    public void test() {
        System.out.println("OK");
    }
    public void reviseEmployeeSalary(Integer employeeId){
        System.out.println("Dummy implemenatation");
    }

    /**
     * Container's getter for EmployeeVO1.
     * @return EmployeeVO1
     */
    public ViewObjectImpl getEmployeesView1() {
        return (ViewObjectImpl)findViewObject("EmployeesView1");
    }
}
